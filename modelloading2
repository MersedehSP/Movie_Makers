
# Set the seed value for the notebook so the results are reproducible
from numpy.random import seed
seed(1)
import numpy as np
import pandas as pd
​
import warnings
warnings.simplefilter('ignore', FutureWarning)
Data Pre-Processing
voice = pd.read_csv('../Resources/voice.csv')
​
X = voice.drop("label", axis=1)
y = voice["label"]
print(X.shape, y.shape)
​
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from tensorflow.keras.utils import to_categorical
​
X_train, X_test, y_train, y_test = train_test_split(
    X, y, random_state=1)
X_scaler = MinMaxScaler().fit(X_train)
X_train_scaled = X_scaler.transform(X_train)
X_test_scaled = X_scaler.transform(X_test)
​
​
# Step 1: Label-encode data set
label_encoder = LabelEncoder()
label_encoder.fit(y_train)
encoded_y_train = label_encoder.transform(y_train)
encoded_y_test = label_encoder.transform(y_test)
​
# Step 2: Convert encoded labels to one-hot-encoding
y_train_categorical = to_categorical(encoded_y_train)
y_test_categorical = to_categorical(encoded_y_test)
(3168, 20) (3168,)
Create a Deep Learning Model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
​
model = Sequential()
model.add(Dense(units=100, activation='relu', input_dim=20))
model.add(Dense(units=100, activation='relu'))
model.add(Dense(units=2, activation='softmax'))
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
model.fit(
    X_train_scaled,
    y_train_categorical,
    epochs=60,
    shuffle=True,
    verbose=0
)
<tensorflow.python.keras.callbacks.History at 0x1a4b1b7390>
Quantify our Trained Model
model_loss, model_accuracy = model.evaluate(
    X_test_scaled, y_test_categorical, verbose=2)
print(
    f"Normal Neural Network - Loss: {model_loss}, Accuracy: {model_accuracy}")
792/1 - 0s - loss: 0.0305 - accuracy: 0.9836
Normal Neural Network - Loss: 0.04585228165178889, Accuracy: 0.9835858345031738
Saving a Trained Model
We can save our trained models using the HDF5 binary format with the extension .h5

# Save the model
<'Ramyata's model name>.save("<Ramyata's model filename>.h5")


Loading a Model
# Load the model
from tensorflow.keras.models import load_model
model = load_model("<Ramyata's model filename>.h5")

Evaluating the loaded model
model_loss, model_accuracy = model.evaluate(
    X_test_scaled, y_test_categorical, verbose=2)
print(
    f"Logistical Regresssion - Loss: {model_loss}, Accuracy: {model_accuracy}")
792/1 - 0s - loss: 0.0305 - accuracy: 0.9836
Normal Neural Network - Loss: 0.04585228165178889, Accuracy: 0.9835858345031738
​